/*
 * Copyright (c) 2007, 2018 Oracle and/or its affiliates. All rights reserved.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0, which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the
 * Eclipse Public License v. 2.0 are satisfied: GNU General Public License,
 * version 2 with the GNU Classpath Exception, which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 */

/*
 * $Id$
 */

package com.sun.ts.tests.jaxws.wsi.j2w.rpc.literal.R2401;

import java.lang.System.Logger;
import java.lang.System.Logger.Level;
import java.net.MalformedURLException;
import java.net.URL;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.w3c.dom.Document;
import org.w3c.dom.Element;

import com.sun.ts.tests.jaxws.common.BaseClient;
import com.sun.ts.tests.jaxws.sharedclients.ClientFactory;
import com.sun.ts.tests.jaxws.sharedclients.SOAPClient;
import com.sun.ts.tests.jaxws.sharedclients.rpclitclient.J2WRLShared;
import com.sun.ts.tests.jaxws.sharedclients.rpclitclient.J2WRLSharedClient;
import com.sun.ts.tests.jaxws.wsi.constants.DescriptionConstants;
import com.sun.ts.tests.jaxws.wsi.constants.SOAPConstants;
import com.sun.ts.tests.jaxws.wsi.utils.DescriptionUtils;

public class Client extends BaseClient implements DescriptionConstants, SOAPConstants {
	/**
	 * The client.
	 */
	private SOAPClient client;

	static J2WRLShared service = null;

	private static final Logger logger = (Logger) System.getLogger(Client.class.getName());

	/**
	 * @class.testArgs: -ap jaxws-url-props.dat
	 * @class.setup_props: webServerHost; webServerPort; platform.mode;
	 *
	 * @param args
	 * @param properties
	 *
	 * @throws Exception
	 */
	@BeforeEach
	public void setup() throws Exception {
		super.setup();
		client = ClientFactory.getClient(J2WRLSharedClient.class, service);
		logger.log(Level.INFO, "setup ok");
	}

	@AfterEach
	public void cleanup() {

		logger.log(Level.INFO, "cleanup");
	}

	/**
	 * @testName: testBindingConformance
	 *
	 * @assertion_ids: WSI:SPEC:R2401
	 *
	 * @test_Strategy: Retrieve the WSDL, generated by the Java-to-WSDL tool, and
	 *                 examine the wsdl:binding elements to ensure that they conform
	 *                 to the WSDL 1.1 section 3 specifics.
	 *
	 * @throws Exception
	 */
	@Test
	public void testBindingConformance() throws Exception {
		Document document = client.getDocument();
		Element[] bindings = DescriptionUtils.getBindings(document);
		for (int i = 0; i < bindings.length; i++) {
			verifyBinding(bindings[i]);
		}
	}

	protected void verifyBinding(Element element) throws Exception {
		Element[] children;
		children = DescriptionUtils.getChildElements(element, SOAP_NAMESPACE_URI, SOAP_BINDING_LOCAL_NAME);
		if (children.length == 0) {
			throw new Exception("Required soap:binding element not present (BP-R2401)");
		}
		verifySOAPBinding(children[0]);
		children = DescriptionUtils.getChildElements(element, WSDL_NAMESPACE_URI, WSDL_OPERATION_LOCAL_NAME);
		for (int i = 0; i < children.length; i++) {
			verifyOperation(children[i]);
		}
	}

	protected void verifySOAPBinding(Element element) throws Exception {
		String transport = element.getAttribute(SOAP_TRANSPORT_ATTR);
		if (transport.length() > 0) {
			verifyURI(transport);
		} else {
			throw new Exception("Required soap:binding attribute not present (BP-R2401)");
		}
		String style = element.getAttribute(SOAP_STYLE_ATTR);
		if (style.length() > 0) {
			verifyStyle(style);
		}
	}

	protected void verifyOperation(Element element) throws Exception {
		Element[] children = DescriptionUtils.getChildElements(element, SOAP_NAMESPACE_URI, SOAP_OPERATION_LOCAL_NAME);
		if (children.length == 0) {
			throw new Exception("Required soap:operation element not found (BP-R2401)");
		}
	}

	protected void verifySOAPOperation(Element element) throws Exception {
		String soapAction = element.getAttribute(SOAP_SOAPACTION_ATTR);
		if (soapAction.length() > 0) {
			verifyURI(soapAction);
		}
		String style = element.getAttribute(DescriptionUtils.SOAP_STYLE_ATTR);
		if (style.length() > 0) {
			verifyStyle(style);
		}
		Element[] children = DescriptionUtils.getChildElements(element, WSDL_NAMESPACE_URI, null);
		for (int i = 0; i < children.length; i++) {
			String localName = children[i].getLocalName();
			if ((localName.equals(WSDL_INPUT_LOCAL_NAME)) || (localName.equals(WSDL_OUTPUT_LOCAL_NAME))) {
				verifyInputOutput(children[i]);
			}
		}
	}

	protected void verifyInputOutput(Element element) throws Exception {
		Element[] children = DescriptionUtils.getChildElements(element, SOAP_NAMESPACE_URI, SOAP_BODY_LOCAL_NAME);
		if (children.length == 0) {
			throw new Exception("Required soap:body element not found (BP-R2401)");
		}
		verifySOAPBody(children[0]);
	}

	protected void verifySOAPBody(Element element) throws Exception {
		String use = element.getAttribute(SOAP_USE_ATTR);
		if (use.length() > 0) {
			verifyUse(use);
		}
		String encodingStyle = element.getAttribute(SOAP_ENCODINGSTYLE_ATTR);
		if (encodingStyle.length() > 0) {
			verifyURI(encodingStyle);
		}
		String namespace = element.getAttribute(SOAP_NAMESPACE_ATTR);
		if (namespace.length() > 0) {
			verifyURI(namespace);
		}
	}

	protected void verifyStyle(String style) throws Exception {
		if (style.equals(SOAP_DOCUMENT)) {
			return;
		}
		if (style.equals(SOAP_RPC)) {
			return;
		}
		throw new Exception("The SOAP style '" + style + "' is invalid (BP-R2401)");
	}

	protected void verifyUse(String use) throws Exception {
		if (use.equals(SOAP_ENCODED)) {
			return;
		}
		if (use.equals(SOAP_LITERAL)) {
			return;
		}
		throw new Exception("The SOAP use '" + use + "' is invalid (BP-R2401)");
	}

	protected void verifyURI(String uri) throws Exception {
		try {
			new URL(uri);
		} catch (MalformedURLException e) {
			throw new Exception("The URI '" + uri + "' is not valid (BP-R2401)", e);
		}
	}
}
