/*
 * Copyright (c) 2007, 2020 Oracle and/or its affiliates. All rights reserved.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0, which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the
 * Eclipse Public License v. 2.0 are satisfied: GNU General Public License,
 * version 2 with the GNU Classpath Exception, which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 */

/*
 * @(#)Client.java	1.3	03/05/09
 */

package com.sun.ts.tests.jaxws.wsi.j2w.rpc.literal.R2301;

import java.lang.System.Logger;
import java.lang.System.Logger.Level;
import java.util.Iterator;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.w3c.dom.Document;
import org.w3c.dom.Element;

import com.sun.ts.tests.jaxws.common.BaseClient;
import com.sun.ts.tests.jaxws.sharedclients.ClientFactory;
import com.sun.ts.tests.jaxws.sharedclients.SOAPClient;
import com.sun.ts.tests.jaxws.sharedclients.rpclitclient.J2WRLShared;
import com.sun.ts.tests.jaxws.sharedclients.rpclitclient.J2WRLSharedClient;
import com.sun.ts.tests.jaxws.wsi.constants.DescriptionConstants;
import com.sun.ts.tests.jaxws.wsi.requests.SOAPRequests;
import com.sun.ts.tests.jaxws.wsi.utils.DescriptionUtils;

import jakarta.xml.soap.SOAPBody;
import jakarta.xml.soap.SOAPElement;
import jakarta.xml.soap.SOAPMessage;

public class Client extends BaseClient implements DescriptionConstants {
	/**
	 * The client.
	 */
	private SOAPClient client;

	static J2WRLShared service = null;

	/**
	 * The document.
	 */
	private Document document;

	private static final Logger logger = (Logger) System.getLogger(Client.class.getName());

	/**
	 * @class.testArgs: -ap jaxws-url-props.dat
	 * @class.setup_props: webServerHost; webServerPort; platform.mode;
	 *
	 * @param args
	 * @param properties
	 *
	 * @throws Exception
	 */
	@BeforeEach
	public void setup() throws Exception {
		super.setup();
		client = ClientFactory.getClient(J2WRLSharedClient.class, service);
		logger.log(Level.INFO, "setup ok");
	}

	@AfterEach
	public void cleanup() {
		logger.log(Level.INFO, "cleanup");
	}

	/**
	 * @testName: testOrder
	 *
	 * @assertion_ids: WSI:SPEC:R2301
	 *
	 * @test_Strategy: Retrieve the WSDL, generated by the Java-to-WSDL tool, and
	 *                 locate the "getBean" operation, examine the response message
	 *                 and capture the part order. A request to the end-point should
	 *                 yield a response with the parts in that particular order.
	 *
	 * @throws Exception
	 */
	@Test
	public void testOrder() throws Exception {
		document = client.getDocument();
		Element operation = getOperation();
		Element output = getOutput(operation);
		Element message = getMessage(output);
		SOAPMessage response = makeRequest();
		verifyOrder(response, message);
	}

	protected Element getOperation() throws Exception {
		Element portType = DescriptionUtils.getPortType(document, "J2WRLSharedEndpoint");
		if (portType == null) {
			throw new Exception("Required portType 'J2WRLSharedEndpoint' not found (BP-R2301)");
		}
		Element operation = DescriptionUtils.getNamedChildElement(portType, WSDL_NAMESPACE_URI,
				WSDL_OPERATION_LOCAL_NAME, "getBean");
		if (operation == null) {
			throw new Exception("Required operation 'getBean' not found (BP-R2301)");
		}
		return operation;
	}

	protected Element getOutput(Element operation) throws Exception {
		Element output = DescriptionUtils.getChildElement(operation, WSDL_NAMESPACE_URI, WSDL_OUTPUT_LOCAL_NAME);
		if (output == null) {
			throw new Exception("Required output for operation 'getBean' not found (BP-R2301)");
		}
		return output;
	}

	protected Element getMessage(Element output) throws Exception {
		String name = output.getAttribute(WSDL_MESSAGE_ATTR);
		int index = name.indexOf(':');
		if (index > 0) {
			name = name.substring(index + 1);
		}
		Element message = DescriptionUtils.getMessage(document, name);
		if (message == null) {
			throw new Exception("Requirement message '" + name + "' for output not found (BP-R2301)");
		}
		return message;
	}

	protected SOAPMessage makeRequest() throws Exception {
		try {
			return client.makeSaajRequest(SOAPRequests.R2301_REQUEST);
		} catch (Exception e) {
			throw new Exception("Unable to make request (BP-R2301)", e);
		}
	}

	protected void verifyOrder(SOAPMessage response, Element message) throws Exception {
		SOAPBody body;
		try {
			body = response.getSOAPBody();
		} catch (Exception e) {
			throw new Exception("Unable to retrieve SOAP body from response (BP-R2301)", e);
		}
		SOAPElement beanResponse = (SOAPElement) body.getFirstChild();
		Iterator responseParts = beanResponse.getChildElements();
		Element[] messageParts = DescriptionUtils.getChildElements(message);
		for (int i = 0; i < messageParts.length; i++) {
			if (!responseParts.hasNext()) {
				throw new Exception("Message has additional part(s) but response has not (BP-R2301)");
			}
			String partName1 = messageParts[i].getAttribute(WSDL_NAME_ATTR);
			SOAPElement part = (SOAPElement) responseParts.next();
			String partName2 = part.getElementName().getLocalName();
			if (!partName2.equals(partName1)) {
				throw new Exception("Expected part named '" + partName1 + "' but got '" + partName2 + "' (BP-R2301)");
			}
		}
	}
}
