/*
 * Copyright (c) 2007, 2024 Oracle and/or its affiliates. All rights reserved.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0, which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the
 * Eclipse Public License v. 2.0 are satisfied: GNU General Public License,
 * version 2 with the GNU Classpath Exception, which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 */

/*
 * $Id$
 */

package com.sun.ts.tests.jaxws.wsi.j2w.rpc.literal.R2754;

import java.lang.System.Logger;
import java.lang.System.Logger.Level;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.w3c.dom.Attr;
import org.w3c.dom.Document;
import org.w3c.dom.Element;

import com.sun.ts.tests.jaxws.common.BaseClient;
import com.sun.ts.tests.jaxws.sharedclients.ClientFactory;
import com.sun.ts.tests.jaxws.sharedclients.SOAPClient;
import com.sun.ts.tests.jaxws.sharedclients.faultclient.*;
import com.sun.ts.tests.jaxws.wsi.constants.DescriptionConstants;
import com.sun.ts.tests.jaxws.wsi.constants.SOAPConstants;
import com.sun.ts.tests.jaxws.wsi.utils.DescriptionUtils;

public class Client extends BaseClient implements DescriptionConstants, SOAPConstants {
	/**
	 * The client.
	 */
	private SOAPClient client;

	static FaultTest service = null;

	private boolean foundOne = false;

	private static final Logger logger = (Logger) System.getLogger(Client.class.getName());

	/**
	 * @class.testArgs: -ap jaxws-url-props.dat
	 * @class.setup_props: webServerHost; webServerPort; platform.mode;
	 *
	 * @param args
	 * @param properties
	 *
	 * @throws Exception
	 */
	@BeforeEach
	public void setup() throws Exception {
		super.setup();
		client = ClientFactory.getClient(FaultTestClient.class, service);
		logger.log(Level.INFO, "setup ok");
	}

	@AfterEach
	public void cleanup() {
		logger.log(Level.INFO, "cleanup");
	}

	/**
	 * @testName: testNameAttributes
	 *
	 * @assertion_ids: WSI:SPEC:R2754
	 *
	 * @test_Strategy: Retrieve the WSDL, generated by the Java-to-WSDL tool, and
	 *                 examine the wsdl:binding elements, ensuring that the
	 *                 contained soap:fault elements have the same name attribute
	 *                 specified on its parent.
	 *
	 * @throws Exception
	 */
	@Test
	public void testNameAttributes() throws Exception {
		Document document = client.getDocument();
		Element[] bindings = DescriptionUtils.getBindings(document);
		logger.log(Level.TRACE, "in testNameAttributes, bindings.length=" + bindings.length);
		for (int i = 0; i < bindings.length; i++) {
			logger.log(Level.TRACE, "bindings[" + i + "].getAttribute(name) = " + bindings[i].getAttribute("name"));
			getOperations(bindings[i]);
		}
		if (!foundOne) {
			throw new Exception("No soap:fault elements found during test");
		}

	}

	protected void getOperations(Element binding) throws Exception {
		Element[] operations = DescriptionUtils.getChildElements(binding, WSDL_NAMESPACE_URI,
				WSDL_OPERATION_LOCAL_NAME);
		logger.log(Level.TRACE, "in getBinding, operations.length=" + operations.length);
		for (int i = 0; i < operations.length; i++) {
			logger.log(Level.TRACE, "operations[" + i + "].getAttribute(name)=" + operations[i].getAttribute("name"));
			getWSDLFaults(operations[i]);
		}
	}

	protected void getWSDLFaults(Element operation) throws Exception {
		Element[] list = DescriptionUtils.getChildElements(operation, WSDL_NAMESPACE_URI, WSDL_FAULT_LOCAL_NAME);
		for (int i = 0; i < list.length; i++) {
			logger.log(Level.TRACE,
					"in getWSDLFaults - list[" + i + "].getAttribute(name) = " + list[i].getAttribute("name"));
			String WSDLFaultName = getWSDLFaultName(list[i]);
			getSOAPFaults(WSDLFaultName, list[i]);
		}
	}

	protected void getSOAPFaults(String WSDLFaultName, Element WSDLFaults) throws Exception {
		Element[] list = DescriptionUtils.getChildElements(WSDLFaults, SOAP_NAMESPACE_URI, SOAP_FAULT_LOCAL_NAME);
		for (int i = 0; i < list.length; i++) {
			logger.log(Level.TRACE,
					"in getSOAPFaults - list[" + i + "].getAttribute(name) = " + list[i].getAttribute("name"));
			String SOAPFaultName = getSOAPFaultName(list[i]);
			if (!(SOAPFaultName.equals(WSDLFaultName))) {
				throw new Exception(
						"Required 'name' attribute does not match the value of the name attribute on its parent element (BP-R2754) - wsdl:fault="
								+ WSDLFaultName + ", soap:fault=" + SOAPFaultName);
			}
		}
	}

	protected String getWSDLFaultName(Element Exception) throws Exception {
		Attr attr = Exception.getAttributeNode(WSDL_NAME_ATTR);
		if (attr == null) {
			throw new Exception("Required 'name' attribute not present on wsdl:fault element (BP-R2754)");
		}
		String name = attr.getValue();
		logger.log(Level.TRACE, "name=" + name);
		return (name);
	}

	protected String getSOAPFaultName(Element Exception) throws Exception {
		Attr attr = Exception.getAttributeNode(SOAP_NAME_ATTR);
		if (attr == null) {
			throw new Exception("Required 'name' attribute not present on soap:fault element (BP-R2754)");
		} else {
			foundOne = true;
		}
		String name = attr.getValue();
		logger.log(Level.TRACE, "name=" + name);
		return (name);
	}

}
